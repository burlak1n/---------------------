import React, { useRef, useEffect } from 'react';

interface Point {
  x: number;
  y: number;
}

interface DrawingStroke {
  color: string;
  width: number;
  points: Point[];
}

interface DrawingData {
  textElements: any[];
  drawingData: DrawingStroke[];
}

interface DrawingRendererProps {
  drawingData: DrawingData;
  width?: number;
  height?: number;
  className?: string;
}

const DrawingRenderer: React.FC<DrawingRendererProps> = ({ 
  drawingData, 
  width = 300, 
  height = 200, 
  className = "" 
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas || !drawingData) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—â–∞–µ–º —Ñ–æ–Ω
    ctx.clearRect(0, 0, width, height);
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, width, height);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const hasStrokes = drawingData.drawingData && drawingData.drawingData.length > 0;
    const hasTexts = drawingData.textElements && drawingData.textElements.length > 0;

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —à—Ç—Ä–∏—Ö–æ–≤, –Ω–∏ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!hasStrokes && !hasTexts) {
      ctx.fillStyle = '#9ca3af';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.font = '14px Arial';
      ctx.fillText('–†–∏—Å—É–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', width / 2, height / 2);
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
    const allPoints: Point[] = [];
    if (hasStrokes) {
      (drawingData.drawingData || []).forEach(stroke => {
        (stroke.points || []).forEach(p => allPoints.push(p));
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º
    if (hasTexts) {
      (drawingData.textElements || []).forEach(el => {
        const fontSize: number = el.font ? parseInt(el.font.match(/\d+/)?.[0] || '16') : 16;
        const text: string = el.text || '';
        const approxWidth = Math.max(1, Math.floor(0.8 * fontSize * text.length));
        allPoints.push({ x: el.x || 0, y: el.y || 0 });
        allPoints.push({ x: (el.x || 0) + approxWidth, y: (el.y || 0) + fontSize });
      });
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    let minX = 0, minY = 0, maxX = width, maxY = height;
    
    if (allPoints.length > 0) {
      minX = Math.min(...allPoints.map(p => p.x));
      minY = Math.min(...allPoints.map(p => p.y));
      maxX = Math.max(...allPoints.map(p => p.x));
      maxY = Math.max(...allPoints.map(p => p.y));
    }

    const contentW = Math.max(1, maxX - minX);
    const contentH = Math.max(1, maxY - minY);

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
    const padding = 20;
    const scaleX = (width - 2 * padding) / contentW;
    const scaleY = (height - 2 * padding) / contentH;
    const scale = Math.min(scaleX, scaleY);

    // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    const offsetX = (width - contentW * scale) / 2 - minX * scale;
    const offsetY = (height - contentH * scale) / 2 - minY * scale;

    // –†–∏—Å—É–µ–º —à—Ç—Ä–∏—Ö–∏ —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if (hasStrokes) {
      (drawingData.drawingData || []).forEach(stroke => {
        if (!stroke.points || stroke.points.length < 2) return;
        ctx.strokeStyle = stroke.color || '#000000';
        ctx.lineWidth = Math.max(1, (stroke.width || 2) * scale);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';

        ctx.beginPath();
        const p0 = stroke.points[0];
        ctx.moveTo(p0.x * scale + offsetX, p0.y * scale + offsetY);
        for (let i = 1; i < stroke.points.length; i++) {
          const p = stroke.points[i];
          ctx.lineTo(p.x * scale + offsetX, p.y * scale + offsetY);
        }
        ctx.stroke();
      });
    }

    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–∏–∑–±–µ–≥–∞–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è)
    if (hasTexts) {
      const placedRects: Array<{x:number;y:number;w:number;h:number}> = [];
      (drawingData.textElements || []).forEach((el) => {
        // –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä –∏ —à—Ä–∏—Ñ—Ç —Ç–∏–ø–∞ "16px Arial"
        const rawFont = typeof el.font === 'string' ? el.font : '16px Arial';
        const sizeMatch = rawFont.match(/(\d+)px/);
        const familyMatch = rawFont.replace(/\d+px\s*/, '').trim();
        const fontSize: number = sizeMatch ? parseInt(sizeMatch[1], 10) : 16;
        const fontFamily: string = familyMatch || 'Arial';

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        const scaledFont = Math.max(12, Math.min(28, Math.floor(fontSize * scale)));
        ctx.font = `${scaledFont}px ${fontFamily}`;
        ctx.fillStyle = el.color || '#000000';
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';

        const x = (el.x || 0) * scale + offsetX;
        let y = (el.y || 0) * scale + offsetY;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        const text = el.text || '';
        const textWidth = ctx.measureText(text).width;

        // –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Ä–∞–Ω–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        const h = scaledFont; // –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ~ —Ä–∞–∑–º–µ—Ä—É —à—Ä–∏—Ñ—Ç–∞
        const intersects = (r1: {x:number;y:number;w:number;h:number}, r2: {x:number;y:number;w:number;h:number}) => (
          r1.x < r2.x + r2.w && r1.x + r1.w > r2.x && r1.y < r2.y + r2.h && r1.y + r1.h > r2.y
        );
        let candidate = { x, y, w: textWidth, h };
        let safety = 0;
        while (placedRects.some(r => intersects(candidate, r)) && safety < 50) {
          // –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑ –Ω–∞ 10% –≤—ã—Å–æ—Ç—ã —à—Ä–∏—Ñ—Ç–∞ –¥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
          y += Math.max(1, Math.floor(h * 0.1));
          candidate = { x, y, w: textWidth, h };
          safety++;
        }
        placedRects.push(candidate);

        // –†–∏—Å—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –∞–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
        ctx.fillText(text, x, y);
      });
    }
  }, [drawingData, width, height]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const hasDrawingData = drawingData?.drawingData && drawingData.drawingData.length > 0;
  const hasTextElements = drawingData?.textElements && drawingData.textElements.length > 0;
  
  if (!drawingData || (!hasDrawingData && !hasTextElements)) {
    return (
      <div className={`bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center ${className}`} style={{ width, height }}>
        <div className="text-center text-gray-500">
          <div className="text-2xl mb-2">üé®</div>
          <div className="text-sm">–†–∏—Å—É–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-white border border-gray-200 rounded-lg p-2 ${className}`}>
      <canvas
        ref={canvasRef}
        width={width}
        height={height}
        className="w-full h-auto"
        style={{ maxWidth: '100%', height: 'auto' }}
      />
    </div>
  );
};

export default DrawingRenderer;
