import React, { useEffect, useState } from 'react';
import { Users, RefreshCw, AlertCircle, CheckCircle, Clock, Download, Filter, Eye, Calendar, FileText, Search } from 'lucide-react';
import { externalUsersApi } from '../api';
import type { ExternalUser, BookingRecord } from '../types';
import UserProfile from '../components/UserProfile';
import SurveyOverview from '../components/SurveyOverview';

const ExternalUsers: React.FC = () => {
  const [users, setUsers] = useState<ExternalUser[]>([]);
  const [bookings, setBookings] = useState<BookingRecord[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [apiHealth, setApiHealth] = useState<boolean | null>(null);
  const [lastSync, setLastSync] = useState<string | null>(null);
  const [useCache, setUseCache] = useState(true);
  const [filterSurvey, setFilterSurvey] = useState<string>('');
  const [filterBooking, setFilterBooking] = useState<string>('all');
  const [searchName, setSearchName] = useState<string>('');
  const [useLocalMode, setUseLocalMode] = useState(false);
  const [localMode, setLocalMode] = useState<'json' | 'debug'>('json');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [selectedUserProfile, setSelectedUserProfile] = useState<number | null>(null);
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–∑–æ—Ä–∞ –∞–Ω–∫–µ—Ç—ã
  const [isSurveyOverviewOpen, setIsSurveyOverviewOpen] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∫–µ—Ç—ã
  const [surveyStats, setSurveyStats] = useState<any>(null);

  useEffect(() => {
    checkApiHealth();
    fetchUsers();
    fetchBookings();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∫–µ—Ç—ã –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ
    loadSurveyStats();
  }, [useLocalMode, localMode]);

  const loadSurveyStats = async () => {
    try {
      const stats = await externalUsersApi.getSurveyStatistics();
      setSurveyStats(stats);
    } catch (err) {
      console.error('Error loading survey stats:', err);
      setSurveyStats(null);
    }
  };

  const checkApiHealth = async () => {
    const isHealthy = await externalUsersApi.checkHealth();
    setApiHealth(isHealthy);
  };

  const handleToggleLocalMode = (useLocal: boolean) => {
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞: ${useLocal}, —Ä–µ–∂–∏–º: ${localMode}`);
    setUseLocalMode(useLocal);
    externalUsersApi.toggleLocalMode(useLocal, localMode);
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
    setUsers([]);
    setError(null);
    setLastSync(null);
    setSurveyStats(null);
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    setTimeout(() => {
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
      checkApiHealth();
      fetchUsers();
      fetchBookings();
      loadSurveyStats();
    }, 100);
  };

  const handleLocalModeChange = (mode: 'json' | 'debug') => {
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö –Ω–∞: ${mode}`);
    setLocalMode(mode);
    if (useLocalMode) {
      externalUsersApi.toggleLocalMode(true, mode);
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
      setUsers([]);
      setError(null);
      setLastSync(null);
      setSurveyStats(null);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
      setTimeout(() => {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
        checkApiHealth();
        fetchUsers();
        fetchBookings();
        loadSurveyStats();
      }, 100);
    }
  };

  const fetchUsers = async () => {
    try {
      console.log(`fetchUsers: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏, –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: ${useLocalMode}`);
      setLoading(true);
      setError(null);
      
      let data;
      if (useLocalMode) {
        console.log('fetchUsers: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º–µ');
        data = await externalUsersApi.getCompletedUsers();
      } else {
        console.log('fetchUsers: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API —Ä–µ–∂–∏–º–µ');
        data = useCache 
          ? await externalUsersApi.getCompletedUsersCached()
          : await externalUsersApi.getCompletedUsers();
      }
      
      console.log(`fetchUsers: –ø–æ–ª—É—á–µ–Ω–æ ${data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log('fetchUsers: –ø–µ—Ä–≤—ã–µ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.slice(0, 2));
      setUsers(data);
      setLastSync(new Date().toISOString());
    } catch (err: any) {
      console.error('fetchUsers: –æ—à–∏–±–∫–∞:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchBookings = async () => {
    try {
      const data = await externalUsersApi.getUserBookings();
      setBookings(data);
    } catch (err: any) {
      console.error('Error fetching bookings:', err);
    }
  };

  const handleRefresh = async () => {
    externalUsersApi.clearCache();
    await Promise.all([fetchUsers(), fetchBookings()]);
  };

  const clearAllFilters = () => {
    setSearchName('');
    setFilterSurvey('');
    setFilterBooking('all');
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hasBooking = (telegramId: number): boolean => {
    return bookings.some(booking => booking.telegram_id === telegramId);
  };

  const handleExportData = () => {
    const csvContent = [
      'Full Name,Phone,Username,Faculty,Group,Completed At,Telegram ID',
      ...users.map(user => 
        `"${user.full_name}","${user.phone}",@${user.username},"${user.faculty}","${user.group}","${user.completed_at}",${user.telegram_id}`
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `external_users_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleViewProfile = (telegramId: number) => {
    setSelectedUserProfile(telegramId);
    setIsProfileOpen(true);
  };

  const handleCloseProfile = () => {
    setIsProfileOpen(false);
    setSelectedUserProfile(null);
  };

  const filteredUsers = users.filter(user => {
    const matchesSurvey = !filterSurvey || 
      user.faculty.toLowerCase().includes(filterSurvey.toLowerCase()) || 
      user.group.toLowerCase().includes(filterSurvey.toLowerCase());
    
    const matchesBooking = filterBooking === 'all' || 
      (filterBooking === 'booked' && hasBooking(user.telegram_id)) ||
      (filterBooking === 'not_booked' && !hasBooking(user.telegram_id));
    
    const matchesName = !searchName || 
      user.full_name.toLowerCase().includes(searchName.toLowerCase()) ||
      user.username.toLowerCase().includes(searchName.toLowerCase());
    
    return matchesSurvey && matchesBooking && matchesName;
  });

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (users.length > 0 && users.length <= 3) {
    console.log('filteredUsers: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
  }

  const uniqueSurveys = Array.from(
    new Set(users.flatMap(user => [user.faculty, user.group]))
  ).sort();

  if (loading && users.length === 0) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <div className="text-gray-500">
            {useLocalMode 
              ? '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...' 
              : '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API...'
            }
          </div>
        </div>
        {searchName && (
          <div className="mt-2 text-sm text-blue-600">
            üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏ username —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          </div>
        )}
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
          <p className="text-gray-600">
            {useLocalMode 
              ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞' 
              : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API'
            }
          </p>
        </div>
        <div className="flex items-center space-x-3">
          {useLocalMode && (
            <button
              onClick={handleExportData}
              className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
              title="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (CSV)"
            >
              <Download className="mr-2 h-4 w-4" />
              –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </button>
          )}
          <button
            onClick={() => setIsSurveyOverviewOpen(true)}
            className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
            title="–û–±–∑–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∫–µ—Ç—ã"
          >
            <FileText className="mr-2 h-4 w-4" />
            –û–±–∑–æ—Ä –∞–Ω–∫–µ—Ç—ã
          </button>
          <button
            onClick={handleRefresh}
            className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç—ã */}
      {surveyStats && (
        <div className="mb-6 bg-gradient-to-r from-purple-50 to-blue-50 p-4 rounded-lg border border-purple-200">
          <div className="flex items-center space-x-2 mb-3">
            <FileText className="h-5 w-5 text-purple-600" />
            <h3 className="text-lg font-medium text-purple-900">
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç—ã {useLocalMode ? `(${localMode === 'json' ? 'JSON —Ñ–∞–π–ª' : 'Debug –¥–∞–Ω–Ω—ã–µ'})` : '(API —Ä–µ–∂–∏–º)'}
            </h3>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">{surveyStats.total_responses}</div>
              <div className="text-sm text-purple-700">–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {Math.round(surveyStats.completion_rate * 100)}%
              </div>
              <div className="text-sm text-purple-700">–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {Math.round(surveyStats.average_completion_time / 60)} –º–∏–Ω
              </div>
              <div className="text-sm text-purple-700">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">
                {Object.keys(surveyStats.question_stats || {}).length}
              </div>
              <div className="text-sm text-purple-700">–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</div>
            </div>
          </div>
        </div>
      )}

      {/* API Health Status */}
      <div className="mb-6">
        <div className="flex items-center space-x-2">
          {apiHealth === true ? (
            <CheckCircle className="h-5 w-5 text-green-500" />
          ) : apiHealth === false ? (
            <AlertCircle className="h-5 w-5 text-red-500" />
          ) : (
            <Clock className="h-5 w-5 text-yellow-500" />
          )}
          <span className="text-sm text-gray-600">
            {useLocalMode 
              ? '–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏' 
              : apiHealth === true 
                ? '–í–Ω–µ—à–Ω–∏–π API –¥–æ—Å—Ç—É–ø–µ–Ω' 
                : apiHealth === false 
                  ? '–í–Ω–µ—à–Ω–∏–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' 
                  : '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...'
            }
          </span>
        </div>
        {lastSync && (
          <div className="text-xs text-gray-500 mt-1">
            –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {new Date(lastSync).toLocaleString()}
          </div>
        )}
      </div>

      {/* Cache Toggle */}
      <div className="mb-6">
        <div className="flex items-center space-x-6">
          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={useCache}
              onChange={(e) => setUseCache(e.target.checked)}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              disabled={useLocalMode}
            />
            <span className="text-sm text-gray-700">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à (5 –º–∏–Ω—É—Ç)</span>
          </label>
          
          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={useLocalMode}
              onChange={(e) => handleToggleLocalMode(e.target.checked)}
              className="rounded border-gray-300 text-green-600 focus:ring-green-500"
            />
            <span className="text-sm text-gray-700">–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (JSON/Debug –¥–∞–Ω–Ω—ã–µ)</span>
          </label>
          
          {useLocalMode && (
            <div className="mt-2 flex items-center space-x-4">
              <label className="flex items-center space-x-2">
                <input
                  type="radio"
                  checked={localMode === 'json'}
                  onChange={() => handleLocalModeChange('json')}
                  className="text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">JSON —Ñ–∞–π–ª</span>
              </label>
              <label className="flex items-center space-x-2">
                <input
                  type="radio"
                  checked={localMode === 'debug'}
                  onChange={() => handleLocalModeChange('debug')}
                  className="text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">Debug –¥–∞–Ω–Ω—ã–µ</span>
              </label>
            </div>
          )}
        </div>
        {useLocalMode && (
          <div className="mt-2 text-sm text-green-600">
            ‚úì –†–∞–±–æ—Ç–∞–µ–º —Å {localMode === 'json' ? '–ª–æ–∫–∞–ª—å–Ω—ã–º JSON —Ñ–∞–π–ª–æ–º shaforms.responses.json' : '—Ç–µ—Å—Ç–æ–≤—ã–º–∏ debug –¥–∞–Ω–Ω—ã–º–∏'}
          </div>
        )}
      </div>

      {/* Filter */}
      <div className="mb-6">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Search className="h-4 w-4 text-gray-500" />
            <div className="relative">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏–ª–∏ username..."
                value={searchName}
                onChange={(e) => setSearchName(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 w-64 pr-10"
              />
              {searchName && (
                <button
                  onClick={() => setSearchName('')}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
                >
                  √ó
                </button>
              )}
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Filter className="h-4 w-4 text-gray-500" />
            <select
              value={filterSurvey}
              onChange={(e) => setFilterSurvey(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">–í—Å–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –∏ –≥—Ä—É–ø–ø—ã</option>
              {uniqueSurveys.map(survey => (
                <option key={survey} value={survey}>{survey}</option>
              ))}
            </select>
          </div>
          <div className="flex items-center space-x-2">
            <Calendar className="h-4 w-4 text-gray-500" />
            <select
              value={filterBooking}
              onChange={(e) => setFilterBooking(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
              <option value="booked">–¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ</option>
              <option value="not_booked">–¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ</option>
            </select>
          </div>
          {(searchName || filterSurvey || filterBooking !== 'all') && (
            <button
              onClick={clearAllFilters}
              className="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
              title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          )}
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
          <div className="flex items-center">
            <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
            <span className="text-red-700">{error}</span>
          </div>
        </div>
      )}

      {/* Users List */}
      <div className="bg-white shadow rounded-lg">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-medium text-gray-900">
              {useLocalMode 
                ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ ${localMode === 'json' ? 'JSON —Ñ–∞–π–ª–∞' : 'debug –¥–∞–Ω–Ω—ã—Ö'}` 
                : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏'
              }
            </h2>
            <span className="text-sm text-gray-500">
              {filteredUsers.length} –∏–∑ {users.length}
              {searchName && (
                <span className="ml-2 text-blue-600">
                  ‚Ä¢ –ü–æ–∏—Å–∫: "{searchName}"
                </span>
              )}
            </span>
          </div>
          {useLocalMode && (
            <div className="text-xs text-green-600 mt-1">
              üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {localMode === 'json' ? 'shaforms.responses.json' : 'debug –¥–∞–Ω–Ω—ã–µ'}
            </div>
          )}
        </div>
        
        {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ */}
        <div className="px-6 py-3 bg-gray-50 border-b border-gray-200">
          <div className="grid grid-cols-12 gap-4 text-xs font-medium text-gray-500 uppercase tracking-wide">
            <div className="col-span-3">–§–ò–û</div>
            <div className="col-span-1">–¢–µ–ª–µ—Ñ–æ–Ω</div>
            <div className="col-span-2">Username</div>
            <div className="col-span-4">–§–∞–∫—É–ª—å—Ç–µ—Ç / –ì—Ä—É–ø–ø–∞</div>
            <div className="col-span-1">–°—Ç–∞—Ç—É—Å</div>
            <div className="col-span-1">–î–∞—Ç–∞</div>
          </div>
        </div>
        
        <div className="divide-y divide-gray-200">
          {filteredUsers.length === 0 ? (
            <div className="px-6 py-8 text-center text-gray-500">
              {users.length === 0 ? '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' : 
                searchName ? `–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchName}" (–§–ò–û –∏–ª–∏ username)` : 
                '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º'
              }
            </div>
          ) : (
            filteredUsers.map((user) => (
              <div key={user.telegram_id} className="px-6 py-4 hover:bg-gray-50 transition-colors duration-150 border-l-4 border-l-transparent hover:border-l-blue-500">
                <div className="grid grid-cols-12 gap-4 items-center">
                  {/* –§–ò–û */}
                  <div className="col-span-3 flex items-center min-w-0">
                    <Users className="h-5 w-5 mr-2 text-gray-400 flex-shrink-0" />
                    <span className="font-medium text-gray-900 truncate">{user.full_name}</span>
                  </div>
                  
                  {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                  <div className="col-span-1 text-sm text-gray-600 font-mono truncate">
                    <a 
                      href={`tel:${user.phone}`} 
                      className="hover:text-blue-600 hover:underline transition-colors"
                      title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
                    >
                      {user.phone}
                    </a>
                  </div>
                  
                  {/* Username */}
                  <div className="col-span-2 text-sm text-blue-600 font-medium truncate">
                    <a 
                      href={`https://t.me/${user.username}`} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="hover:text-blue-800 hover:underline transition-colors"
                      title="–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram"
                    >
                      {user.username}
                    </a>
                  </div>
                  
                  {/* –§–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø–∞ */}
                  <div className="col-span-4 text-sm text-gray-500 min-w-0">
                    <div className="truncate">{user.faculty}</div>
                    <div className="text-xs text-gray-400">{user.group}</div>
                  </div>
                  
                  {/* –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ */}
                  <div className="col-span-1 text-center">
                    {hasBooking(user.telegram_id) ? (
                      <div className="flex items-center justify-center text-green-600">
                        <Calendar className="h-4 w-4 mr-1" />
                        <span className="text-xs font-medium">–ó–∞–ø–∏—Å–∞–Ω</span>
                      </div>
                    ) : (
                      <div className="text-xs text-gray-400">-</div>
                    )}
                  </div>
                  
                  {/* –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
                  <div className="col-span-1 text-xs text-gray-500 text-center">
                    {new Date(user.completed_at).toLocaleDateString()}
                  </div>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π */}
                <div className="mt-3 flex justify-end">
                  <button
                    onClick={() => handleViewProfile(user.telegram_id)}
                    className="inline-flex items-center px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 rounded hover:bg-blue-200 transition-colors"
                    title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
                  >
                    <Eye className="w-3 h-3 mr-1" />
                    –ü—Ä–æ—Ñ–∏–ª—å
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Statistics */}
      {users.length > 0 && (
        <div className="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white p-4 rounded-lg shadow">
            <div className="text-sm font-medium text-gray-500">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            <div className="text-2xl font-bold text-gray-900">{users.length}</div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow">
            <div className="text-sm font-medium text-gray-500">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤</div>
            <div className="text-2xl font-bold text-gray-900">
              {Array.from(new Set(users.map(user => user.faculty))).length}
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow">
            <div className="text-sm font-medium text-gray-500">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø</div>
            <div className="text-2xl font-bold text-gray-900">
              {Array.from(new Set(users.map(user => user.group))).length}
            </div>
          </div>
          <div className="bg-white p-4 rounded-lg shadow">
            <div className="text-sm font-medium text-gray-500">
              {useLocalMode ? '–° telegram_id' : '–ó–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'}
            </div>
            <div className="text-2xl font-bold text-green-600">
              {useLocalMode 
                ? users.filter(user => user.telegram_id > 0).length
                : users.filter(user => hasBooking(user.telegram_id)).length
              }
            </div>
          </div>
        </div>
      )}

      {/* User Profile Modal */}
      {selectedUserProfile && (
        <UserProfile
          telegramId={selectedUserProfile}
          isOpen={isProfileOpen}
          onClose={handleCloseProfile}
        />
      )}

      {/* Survey Overview Modal */}
      <SurveyOverview
        isOpen={isSurveyOverviewOpen}
        onClose={() => setIsSurveyOverviewOpen(false)}
      />
    </div>
  );
};

export default ExternalUsers;
